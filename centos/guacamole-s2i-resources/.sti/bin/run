#!/bin/bash -e
#
# S2I run script for the 'guacamole-s2i' image.
# The run script executes the server that runs your application.
#
# For more information see the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

function configure_https() {
  https="<!-- No HTTPS configuration discovered -->"
  if [ -n "${TOMCAT_HTTPS_CERTIFICATE_DIR}" -a -n "${TOMCAT_HTTPS_CERTIFICATE}" -a -n "${TOMCAT_HTTPS_CERTIFICATE_KEY}"  -a -n "${TOMCAT_HTTPS_CA_CERTIFICATE}" ] ; then
      password=""
      if [ -n "${TOMCAT_HTTPS_CERTIFICATE_PASSWORD}" ] ; then
          password=" SSLPassword=\"${TOMCAT_HTTPS_CERTIFICATE_PASSWORD}\" "
      fi
      https="<Connector \
             protocol=\"org.apache.coyote.http11.Http11AprProtocol\" \
             port=\"8443\" maxThreads=\"200\" \
             scheme=\"https\" secure=\"true\" SSLEnabled=\"true\" \
             SSLCertificateFile=\"${TOMCAT_HTTPS_CERTIFICATE_DIR}/${TOMCAT_HTTPS_CERTIFICATE}\" \
             SSLCertificateKeyFile=\"${TOMCAT_HTTPS_CERTIFICATE_DIR}/${TOMCAT_HTTPS_CERTIFICATE_KEY}\" \
             SSLCACertificateFile=\"${TOMCAT_HTTPS_CERTIFICATE_DIR}/${TOMCAT_HTTPS_CA_CERTIFICATE}\" \
             ${password}  \
             SSLVerifyClient=\"require\" SSLProtocol=\"TLSv1+TLSv1.1+TLSv1.2\"/>"
  elif [ -n "${TOMCAT_HTTPS_CERTIFICATE_DIR}" -o -n "${TOMCAT_HTTPS_CERTIFICATE}" -o -n "${TOMCAT_HTTPS_CERTIFICATE_KEY}" -o -n "${TOMCAT_HTTPS_CA_CERTIFICATE}" ] ; then
      echo "WARNING! Partial HTTPS configuration, the https connector WILL NOT be configured."
  fi
  sed -i "s|### HTTPS_CONNECTOR ###|${https}|" $TOMCAT_HOME/conf/server.xml
}


configure_https

exec catalina.sh /opt/guacamole/bin/start.sh
